using System;
using System.Collections.Generic;
using System.Linq;

namespace GroupDictionaryApp
{
    class Program
    {
        // Dictionary where each username maps to a list of passwords (for example, password history)
        static Dictionary<string, List<string>> userCredentials = new Dictionary<string, List<string>>();

        static void Main(string[] args)
        {
            bool isRunning = true;
// Main programming loop with switch statement to process user menu selection
            while (isRunning)
            {
                Console.WriteLine("\n======= USER ACCOUNT MENU =======");
                Console.WriteLine("1. Load Sample User Data");
                Console.WriteLine("2. Display All Usernames & Passwords");
                Console.WriteLine("3. Remove a Username");
                Console.WriteLine("4. Add a New Username and Password");
                Console.WriteLine("5. Add a Password to Existing User");
                Console.WriteLine("6. Sort and Display Usernames");
                Console.WriteLine("7. Exit");
                Console.Write("Select an option (1-7): ");

                string choice = Console.ReadLine();
	// Switch statement handles all dictionary operations
                switch (choice)
                {
                    case "1":
                        LoadSampleUsers(); // Add predefined key-value pairs
                        break;
                    case "2":
                        DisplayAllUsers(); // Show all keys and their associated values
                        break;
                    case "3":
                        RemoveUsername(); // Remove a key from the dictionary
                        break;
                    case "4":
                        AddNewUser();// Add a brand new key-value entry
                        break;
                    case "5":
                        AddPasswordToUser(); // Append a value to an existing key
                        break;
                    case "6":
                        SortAndShowUsernames(); // Display dictionary with sorted keys
                        break;
                    case "7":
                        isRunning = false; // Exit the program
                        Console.WriteLine("Exiting program...");
                        break;
                    default:
                        Console.WriteLine("Invalid input. Please choose a number between 1 and 7."); // Input validation
                        break;
                }
            }
        }

        // 1. Populate the dictionary with sample usernames and passwords aka group names
        static void LoadSampleUsers()
        {
            userCredentials.Clear();

            userCredentials["Shane"] = new List<string> { "Wright" };
            userCredentials["Jeanpaul"] = new List<string> { "Colon" };
            userCredentials["Adi"] = new List<string> { "Eliav" };
	userCredentials["Sherikay"] = new List<string>{"Edwards"};
            userCredentials["First Name2"] = new List<string> { "Last Name 2" };

            Console.WriteLine("Sample user data loaded.");
        }

        // 2. Show all usernames and their passwords
        static void DisplayAllUsers()
        {
            if (userCredentials.Count == 0)
            {
                Console.WriteLine("No user data found.");
                return;
            }

            Console.WriteLine("\n--- User Credentials ---");
            foreach (var pair in userCredentials)
            {
                Console.WriteLine($"Username: {pair.Key} â†’ Password(s): {string.Join(", ", pair.Value)}");
            }
        }

        // 3. Remove a user from the dictionary
        static void RemoveUsername()
        {
            Console.Write("Enter the username to remove: ");
            string username = Console.ReadLine();

            if (userCredentials.Remove(username))
            {
                Console.WriteLine($"Username '{username}' removed.");
            }
            else
            {
                Console.WriteLine("Username not found.");
            }
        }

        // 4. Add a new username and password
        static void AddNewUser()
        {
            Console.Write("Enter a new username: ");
            string newUsername = Console.ReadLine();

            if (userCredentials.ContainsKey(newUsername))
            {
                Console.WriteLine("This username already exists. Use option 5 to add a new password.");
                return;
            }

            Console.Write("Enter a password: ");
            string newPassword = Console.ReadLine();

            userCredentials[newUsername] = new List<string> { newPassword };
            Console.WriteLine($"User '{newUsername}' added with initial password.");
        }

        // 5. Add a password to an existing user
        static void AddPasswordToUser()
        {
            Console.Write("Enter existing username: ");
            string existingUsername = Console.ReadLine();

            if (!userCredentials.ContainsKey(existingUsername))
            {
                Console.WriteLine("Username not found.");
                return;
            }

            Console.Write("Enter new password to add: ");
            string newPassword = Console.ReadLine();

            userCredentials[existingUsername].Add(newPassword);
            Console.WriteLine($"Password added to user '{existingUsername}'.");
        }

        // 6. Sort and display all usernames
        static void SortAndShowUsernames()
        {
            if (userCredentials.Count == 0)
            {
                Console.WriteLine("No usernames to sort.");
                return;
            }

            Console.WriteLine("\n--- Sorted Usernames ---");
            foreach (var username in userCredentials.Keys.OrderBy(k => k))
            {
                Console.WriteLine(username);
            }
        }
    }
}

